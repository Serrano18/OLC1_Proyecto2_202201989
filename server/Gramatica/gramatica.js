/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,20],$V3=[1,25],$V4=[1,24],$V5=[1,23],$V6=[1,22],$V7=[1,21],$V8=[1,16],$V9=[1,17],$Va=[5,16,17,20,25,31,37,40,42,45,48,49,86,89],$Vb=[1,42],$Vc=[1,39],$Vd=[1,40],$Ve=[1,44],$Vf=[1,66],$Vg=[1,61],$Vh=[1,51],$Vi=[1,52],$Vj=[1,55],$Vk=[1,56],$Vl=[1,57],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,67],$Vu=[1,68],$Vv=[5,16,17,20,25,31,32,37,40,42,45,48,49,50,55,58,59,60,61,62,63,64,65,66,67,71,83,86,89],$Vw=[8,33],$Vx=[8,24,30],$Vy=[2,84],$Vz=[1,86],$VA=[1,85],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[8,23,30,33,41,50,51,52,53,54,68,69,75,76,77,78,79,80,81,82,87],$VP=[5,16,17,20,25,31,37,40,42,45,48,49,86,89,90],$VQ=[8,23,30,33,41,50,51,68,69,75,76,77,78,79,80,81,82,87],$VR=[8,23,30,33,41,68,69,75,76,77,78,79,80,81,82,87],$VS=[37,42],$VT=[1,179],$VU=[1,182],$VV=[8,23,30,33,41,69,87],$VW=[37,40,42],$VX=[23,30];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"fn_cout":7,"PYC":8,"fn_if":9,"variables":10,"subebaja":11,"fn_dowhile":12,"fn_while":13,"fn_for":14,"fn_switch":15,"BREAK":16,"CONTINUE":17,"declaracioVectores":18,"modivectores":19,"ID":20,"CORIZQ":21,"expresion":22,"CORDER":23,"ASIGNACION":24,"TIPOD":25,"NEW":26,"repeti":27,"valores":28,"listavalores":29,"CM":30,"SWITCH":31,"PARIZQ":32,"PARDER":33,"LLAVEIZQ":34,"caselist":35,"fn_default":36,"LLAVEDER":37,"caselista":38,"cases":39,"CASE":40,"DP":41,"DEFAULT":42,"fn_dvariables":43,"avariables":44,"FOR":45,"actualizacion":46,"bloque":47,"WHILE":48,"DO":49,"RES":50,"MAS":51,"MUL":52,"DIV":53,"MOD":54,"POW":55,"relacionales":56,"logicos":57,"NUMBER":58,"DOUBLE":59,"TRUE":60,"FALSE":61,"CADENA":62,"CARACTER":63,"TOLOWER":64,"TOUPPER":65,"ROUND":66,"TOSTRING":67,"SADM":68,"PF":69,"LENGHT":70,"TYPEOF":71,"CSTR":72,"MASD":73,"MEND":74,"IGUAL":75,"DISTINTO":76,"MENOR":77,"MENORIGUAL":78,"MAYOR":79,"MAYORIGUAL":80,"AND":81,"OR":82,"NOT":83,"listavar":84,"findeclaracion":85,"COUT":86,"<<":87,"SALTOCOUT":88,"IF":89,"ELSE":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",16:"BREAK",17:"CONTINUE",20:"ID",21:"CORIZQ",23:"CORDER",24:"ASIGNACION",25:"TIPOD",26:"NEW",30:"CM",31:"SWITCH",32:"PARIZQ",33:"PARDER",34:"LLAVEIZQ",37:"LLAVEDER",40:"CASE",41:"DP",42:"DEFAULT",45:"FOR",48:"WHILE",49:"DO",50:"RES",51:"MAS",52:"MUL",53:"DIV",54:"MOD",55:"POW",58:"NUMBER",59:"DOUBLE",60:"TRUE",61:"FALSE",62:"CADENA",63:"CARACTER",64:"TOLOWER",65:"TOUPPER",66:"ROUND",67:"TOSTRING",68:"SADM",69:"PF",70:"LENGHT",71:"TYPEOF",72:"CSTR",73:"MASD",74:"MEND",75:"IGUAL",76:"DISTINTO",77:"MENOR",78:"MENORIGUAL",79:"MAYOR",80:"MAYORIGUAL",81:"AND",82:"OR",83:"NOT",86:"COUT",87:"<<",88:"SALTOCOUT",89:"IF",90:"ELSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[19,6],[19,9],[18,10],[18,15],[18,6],[18,10],[27,3],[28,3],[28,1],[29,3],[29,1],[15,8],[35,1],[35,0],[38,2],[38,1],[39,4],[36,3],[36,0],[10,2],[10,2],[14,8],[46,1],[46,1],[13,5],[12,6],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,6],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,3],[22,4],[22,4],[22,4],[22,4],[22,5],[22,4],[22,1],[22,5],[22,4],[22,4],[22,7],[22,5],[44,3],[11,2],[11,2],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[57,3],[57,3],[57,2],[43,3],[84,3],[84,1],[85,0],[85,2],[7,3],[7,5],[47,3],[47,2],[9,5],[9,7],[9,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AST($$[$0-1]);
break;
case 2: case 30:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 24: case 26: case 31:
 this.$ =  [$$[$0]];
break;
case 4: case 7: case 8: case 35: case 36: case 57:
 this.$ = $$[$0-1];
break;
case 5: case 6: case 9: case 10: case 11: case 28: case 38: case 39: case 49: case 50:
 this.$ = $$[$0];
break;
case 12:
this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 13:
this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 14: case 15: case 22:
this.$ = $$[$0-1];
break;
case 16:
this.$ = new Avector($$[$0-5],$$[$0-3],null,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 17:
this.$ = new Avector($$[$0-8],$$[$0-6],$$[$0-3],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 18:
this.$ = new Dvectores($$[$0-9],$$[$0-8],$$[$0-3],$$[$0-1],null,_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 19:
this.$ = new Dvectores($$[$0-14],$$[$0-13],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-14].first_line,_$[$0-14].first_column);
break;
case 20:
this.$ = new Dvectores2($$[$0-5],$$[$0-4],true,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 21:
this.$ = new Dvectores2($$[$0-9],$$[$0-8],false,$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 23: case 25:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 27:
this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 29:
 this.$ = null;
break;
case 32:
this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 33:
this.$ = new Default($$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 37:
this.$ = new For($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 40:
this.$ = new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 41:
this.$ = new Dowhile($$[$0-1],$$[$0-4],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 42:
 this.$ = new Aritmetica(new Primitivo(0,0,0),$$[$0],OpAritmetica.RESTA,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 43:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.SUMA,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 44:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.RESTA,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 45:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.PRODUCTO,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 46:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.DIVISION,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 47:
this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.MOD,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 48:
this.$ =  new Aritmetica($$[$0-3],$$[$0-1],OpAritmetica.POW,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 51:
 this.$ = new Primitivo($$[$0],TipoDato.NUMBER,_$[$0].first_line,_$[$0].first_column); 
break;
case 52:
 this.$ =  new Primitivo($$[$0],TipoDato.DOUBLE,_$[$0].first_line,_$[$0].first_column); 
break;
case 53: case 54:
 this.$ =  new Primitivo($$[$0],TipoDato.BOOLEANO,_$[$0].first_line,_$[$0].first_column); 
break;
case 55:
 this.$ =  new Primitivo($$[$0],TipoDato.STRING,_$[$0].first_line,_$[$0].first_column); 
break;
case 56:
 this.$ =  new Primitivo($$[$0],TipoDato.CHAR,_$[$0].first_line,_$[$0].first_column); 
break;
case 58:
this.$ = new Tolower($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 59:
this.$ = new Toupper($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 60:
this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 61:
this.$ = new Tostring($$[$02],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 62:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 63:
this.$ = new Casteo($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 64:
this.$ = new Valorid($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 65:
this.$ = new Length($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 66:
this.$ = new Typeof($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 67:
this.$ = new Vvector($$[$0-3],$$[$0-1],null,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 68:
this.$ = new Vvector($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 69:
this.$ = new Cstr($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 70:
this.$ = new Avariable($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 71:
this.$ = new Subebaja($$[$0-1],true,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 72:
this.$ = new Subebaja($$[$0-1],false,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 73:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.IGUAL,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 74:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.DISTINTO,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 75:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENOR,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 76:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENORIGUAL,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 77:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYOR,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 78:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYORIGUAL,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 79:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.AND,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 80:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.OR,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 81:
 this.$ =  new Logico(null,$$[$0],OpLogico.NOT,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 82:
this.$ = new Dvariables($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 83:
$$[$0-2].push($$[$0]); this.$ =$$[$0-2];
break;
case 84:
this.$ = [$$[$0]];
break;
case 85:
this.$=null;
break;
case 86:
this.$ = $$[$0];
break;
case 87:
 this.$ = new Cout($$[$0],false,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 88:
 this.$ = new Cout($$[$0-2],true,_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 89:
 this.$= new Bloque($$[$0-1]);
break;
case 90:
 this.$ = new Bloque([]); 
break;
case 91:
 this.$ = new FN_IF($$[$0-2],$$[$0],null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 92: case 93:
 this.$ = new FN_IF($$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:$V2,25:$V3,31:$V4,43:18,44:19,45:$V5,48:$V6,49:$V7,86:$V8,89:$V9},{1:[3]},{5:[1,26],6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:$V2,25:$V3,31:$V4,43:18,44:19,45:$V5,48:$V6,49:$V7,86:$V8,89:$V9},o($Va,[2,3]),{8:[1,28]},o($Va,[2,5]),o($Va,[2,6]),{8:[1,29]},{8:[1,30]},o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),{8:[1,31]},{8:[1,32]},{8:[1,33]},{8:[1,34]},{87:[1,35]},{32:[1,36]},{8:[1,37]},{8:[1,38]},{21:[1,41],24:$Vb,73:$Vc,74:$Vd},{34:$Ve,47:43},{32:[1,45]},{32:[1,46]},{32:[1,47]},{20:[1,48],84:49},{1:[2,1]},o($Va,[2,2]),o($Va,[2,4]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),o($Va,[2,15]),{20:$Vf,22:50,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:69,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},o($Vv,[2,35]),o($Vv,[2,36]),o($Vw,[2,71]),o($Vw,[2,72]),{20:$Vf,22:70,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:71,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{48:[1,72]},{4:73,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:$V2,25:$V3,31:$V4,37:[1,74],43:18,44:19,45:$V5,48:$V6,49:$V7,86:$V8,89:$V9},{20:$Vf,22:75,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{10:76,20:[1,78],25:[1,77],43:18,44:19},{20:$Vf,22:79,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},o($Vx,$Vy,{21:[1,80]}),{8:[2,85],24:[1,83],30:[1,82],85:81},{8:[2,87],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,87:[1,84]},{20:$Vf,22:100,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{32:[1,101]},o($VO,[2,49]),o($VO,[2,50]),o($VO,[2,51]),o($VO,[2,52]),o($VO,[2,53]),o($VO,[2,54]),o($VO,[2,55]),o($VO,[2,56]),{20:$Vf,22:102,25:[1,103],32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{32:[1,104]},{32:[1,105]},{32:[1,106]},{32:[1,107]},o($VO,[2,64],{21:[1,108]}),{32:[1,109]},{20:$Vf,22:110,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{33:[1,111],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{23:[1,112],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o($Vw,[2,70],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),{32:[1,113]},{6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:$V2,25:$V3,31:$V4,37:[1,114],43:18,44:19,45:$V5,48:$V6,49:$V7,86:$V8,89:$V9},o($VP,[2,90]),{33:[1,115],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{20:$Vf,22:116,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:[1,117],84:49},{24:$Vb},{33:[1,118],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{23:[1,119]},{8:[2,82]},{20:[1,120]},{20:$Vf,22:121,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{88:[1,122]},{20:$Vf,22:123,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:124,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:125,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:126,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:127,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:128,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{70:[1,129],72:[1,130]},{20:$Vf,22:131,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:132,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:133,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:134,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:135,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:136,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:137,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:138,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},o($VO,[2,42]),{20:$Vf,22:139,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{33:[1,140],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{33:[1,141]},{20:$Vf,22:142,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:143,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:144,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:145,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:146,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:147,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},o([8,23,30,33,41,68,69,87],[2,81],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),{34:$Ve,47:148},{21:[1,150],24:[1,149]},{20:$Vf,22:151,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},o($VP,[2,89]),{34:$Ve,47:152},{8:[1,153],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o($Vx,$Vy),{34:[1,154]},{21:[1,156],24:[1,155]},o($Vx,[2,83]),{8:[2,86],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{8:[2,88]},o($VQ,[2,43],{52:$VB,53:$VC,54:$VD}),o($VQ,[2,44],{52:$VB,53:$VC,54:$VD}),o($VO,[2,45]),o($VO,[2,46]),o($VO,[2,47]),{41:[1,157],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{32:[1,158]},{32:[1,159]},o($VR,[2,73],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD}),o($VR,[2,74],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD}),o($VR,[2,75],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD}),o($VR,[2,76],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD}),o($VR,[2,77],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD}),o($VR,[2,78],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD}),o([8,23,30,33,41,68,69,81,82,87],[2,79],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL}),o([8,23,30,33,41,68,69,82,87],[2,80],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),{30:[1,160],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o($VO,[2,57]),{20:$Vf,22:161,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{33:[1,162],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{33:[1,163],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{33:[1,164],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{33:[1,165],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{23:[1,166],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{33:[1,167],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o($Va,[2,91],{90:[1,168]}),{20:$Vf,22:169,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{20:$Vf,22:170,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{33:[1,171],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o($Va,[2,40]),{11:173,20:[1,175],44:174,46:172},o($VS,[2,29],{35:176,38:177,39:178,40:$VT}),{21:$VU,26:[1,180],27:181},{23:[1,183]},{20:$Vf,22:184,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{33:[1,185]},{33:[1,186]},{20:$Vf,22:187,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},o($VV,[2,63],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),o($VO,[2,58]),o($VO,[2,59]),o($VO,[2,60]),o($VO,[2,61]),o($VO,[2,67],{21:[1,188]}),o($VO,[2,66]),{9:190,34:$Ve,47:189,89:$V9},{8:[2,16],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{23:[1,191],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{8:[2,41]},{33:[1,192]},{33:[2,38]},{33:[2,39]},{24:$Vb,73:$Vc,74:$Vd},{36:193,37:[2,34],42:[1,194]},o($VS,[2,28],{39:195,40:$VT}),o($VW,[2,31]),{20:$Vf,22:196,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{25:[1,197]},{8:[2,20]},{20:$Vf,22:199,29:198,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{24:[1,200]},o($VV,[2,62],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),o($VO,[2,65]),o($VO,[2,69]),{33:[1,201],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{20:$Vf,22:202,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},o($Va,[2,92]),o($Va,[2,93]),{24:[1,203]},{34:$Ve,47:204},{37:[1,205]},{41:[1,206]},o($VW,[2,30]),{41:[1,207],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{21:[1,208]},{23:[1,209],30:[1,210]},o($VX,[2,26],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),{21:[1,212],26:[1,211]},o($VO,[2,48]),{23:[1,213],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{20:$Vf,22:214,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},o($Va,[2,37]),o($Va,[2,27]),{4:215,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:$V2,25:$V3,31:$V4,43:18,44:19,45:$V5,48:$V6,49:$V7,86:$V8,89:$V9},{4:216,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:$V2,25:$V3,31:$V4,43:18,44:19,45:$V5,48:$V6,49:$V7,86:$V8,89:$V9},{20:$Vf,22:217,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},o([8,23,30],[2,22]),{20:$Vf,22:218,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{25:[1,219]},{21:$VU,27:221,28:220},o($VO,[2,68]),{8:[2,17],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:$V2,25:$V3,31:$V4,37:[2,33],43:18,44:19,45:$V5,48:$V6,49:$V7,86:$V8,89:$V9},o($VW,[2,32],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,18:14,19:15,43:18,44:19,6:27,16:$V0,17:$V1,20:$V2,25:$V3,31:$V4,45:$V5,48:$V6,49:$V7,86:$V8,89:$V9}),{23:[1,222],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o($VX,[2,25],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),{21:[1,223]},{23:[1,224],30:[1,225]},o($VX,[2,24]),{8:[2,18]},{20:$Vf,22:226,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{8:[2,21]},{21:$VU,27:227},{23:[1,228],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o($VX,[2,23]),{21:[1,229]},{20:$Vf,22:230,32:$Vg,50:$Vh,55:$Vi,56:53,57:54,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,71:$Vt,83:$Vu},{23:[1,231],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,68:$VE,69:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{8:[2,19]}],
defaultActions: {26:[2,1],81:[2,82],122:[2,88],171:[2,41],173:[2,38],174:[2,39],181:[2,20],222:[2,18],224:[2,21],231:[2,19]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías
    const {Aritmetica} = require("../js/Expresion/aritmetica");
    const {Relacional} = require("../js/Expresion/relacionales");
    const {Logico} = require("../js/Expresion/logico");
    const {Primitivo} = require("../js/Expresion/primitivo");
    const {OpAritmetica,OpRelacional,OpLogico,TipoDato} = require("../js/Abstract/resultado");
    const {Cout} = require("../js/Instruccion/cout");
    const {Bloque} = require("../js/Instruccion/bloque");
    const {FN_IF} = require("../js/Instruccion/control/if");
    const {AST} = require("../js/AST");
    const {Tolower} = require("../js/Expresion/tolower");
    const {Toupper} = require("../js/Expresion/toupper");
    const {Round} = require("../js/Expresion/round");
    const {Tostring} = require("../js/Expresion/tostring");
    const {Ternario} = require("../js/Expresion/ternario");
    const {Typeof} = require("../js/Expresion/typeof");
    const {Casteo} = require("../js/Expresion/casteos");
    const {Dvariables} = require("../js/Instruccion/dvariables");
    const {Subebaja} = require("../js/Instruccion/increydecre");
    const {Valorid} = require("../js/Expresion/valorid");
    const {Avariable} = require("../js/Instruccion/actualizarvalor")
    const {Length}=require("../js/Expresion/length");
    const {Break} = require("../js/Instruccion/break");
    const {Continue} = require("../js/Instruccion/continue");
    const {Dowhile} = require("../js/Instruccion/dowhile");
    const {While} = require("../js/Instruccion/while");
    const {For} = require("../js/Instruccion/for");
    const {Case} = require("../js/Instruccion/case")
    const {Default}= require("../js/Instruccion/default")
    const {Switch}= require("../js/Instruccion/switch")
    const {Dvectores} = require("../js/Instruccion/dvectores");
    const {Dvectores2}=require("../js/Instruccion/dvectores2");
    const {Vvector}= require("../js/Expresion/valoresvector");
    const {Avector} = require("../js/Instruccion/avector");
    const {Cstr} = require("../js/Expresion/cstr");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1://ignora espacios
break;
case 2:/*Comentario de una linea*/
break;
case 3:/* Ignorar comentarios multilinea */
break;
case 4:return 59;
break;
case 5:return 58;
break;
case 6:return 89;
break;
case 7:return 90;
break;
case 8:return 34;
break;
case 9:return 37;
break;
case 10:return 86;
break;
case 11:return 87;
break;
case 12:return 88;
break;
case 13:return 64;
break;
case 14:return 65;
break;
case 15:return 66;
break;
case 16:return 70;
break;
case 17:return 71;
break;
case 18:return 67;
break;
case 19:return 72;
break;
case 20:return 68;
break;
case 21:return 73;
break;
case 22:return 74;
break;
case 23:return 49;
break;
case 24:return 48;
break;
case 25:return 45
break;
case 26:return 16;
break;
case 27:return 17;
break;
case 28:return 'RETURN';
break;
case 29:return 31;
break;
case 30:return 40;
break;
case 31:return 42;
break;
case 32:return 32;
break;
case 33:return 33;
break;
case 34:return 21;
break;
case 35:return 23;
break;
case 36:return 26;
break;
case 37:return 51;
break;
case 38:return 50;
break;
case 39:return 52;
break;
case 40:return 53;
break;
case 41:return 8;
break;
case 42:return 69;
break;
case 43:return 30;
break;
case 44:return 41;
break;
case 45:return 54;
break;
case 46:return 55;
break;
case 47:return 75;
break;
case 48:return 76;
break;
case 49:return 78;
break;
case 50:return 77;
break;
case 51:return 80;
break;
case 52:return 79;
break;
case 53:return 24;
break;
case 54:return 81;
break;
case 55:return 82;
break;
case 56:return 83;
break;
case 57: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 63; 
break;
case 59:return 60;
break;
case 60:return 61;
break;
case 61:return 25;
break;
case 62:return 20;
break;
case 63:return 5;
break;
case 64:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[\t\r\n\f]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:cout\b)/i,/^(?:<<)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:std::tostring\b)/i,/^(?:c_str\b)/i,/^(?:\?)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:%)/i,/^(?:pow\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[\"]([^"\\]|\\.)*["])/i,/^(?:'([^\']|['\n']|[\t]|[\r]|[\u])')/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int|double|bool|char|std::string\b)/i,/^(?:([a-z])[a-z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}